/*** Day 14 = Error Handling
 *? https://30dayjavascript.js.org/14-day/
 *? https://tr.javascript.info/error-handling
 *! Not: Kod bloklarÄ±nÄ± yorum satÄ±rÄ±ndan Ã§Ä±karmak iÃ§in (ctrl + k + u) kÄ±sayolunu kullanabilirsin.
***/

//! Error Handling

    /*
        try {
            // hata verilebilicek kod
        } catch (err) {
            // bir hata oluÅŸursa Ã§alÄ±ÅŸtÄ±rÄ±lacak kod
        } finally {
            // bir hatanÄ±n oluÅŸup oluÅŸmadÄ±ÄŸÄ±na bakÄ±lmaksÄ±zÄ±n yÃ¼rÃ¼tÃ¼lecek kod
        }
    */

        //* try: try bloÄŸunda hata oluÅŸturabilecek kodu yazÄ±n. try ifadesi, yÃ¼rÃ¼tÃ¼lÃ¼rken hatalar iÃ§in test edilecek bir kod bloÄŸu tanÄ±mlamamÄ±zÄ± saÄŸlar.

        //* catch: Bir hata oluÅŸtuÄŸunda catch bloÄŸunda bir ÅŸeyler yapmak iÃ§in kod yazÄ±n. Catch bloÄŸu, size hata bilgisi verecek parametrelere sahip olabilir. Yakalama bloÄŸu, bir hatayÄ± gÃ¼nlÃ¼ÄŸe kaydetmek veya kullanÄ±cÄ±ya belirli mesajlarÄ± gÃ¶rÃ¼ntÃ¼lemek iÃ§in kullanÄ±lÄ±r.

        //* finally: finally bloÄŸu, bir hata oluÅŸmasÄ±ndan baÄŸÄ±msÄ±z olarak her zaman yÃ¼rÃ¼tÃ¼lÃ¼r. finally bloÄŸu, kalan gÃ¶revi tamamlamak veya try bloÄŸunda hata oluÅŸmadan Ã¶nce deÄŸiÅŸmiÅŸ olabilecek deÄŸiÅŸkenleri sÄ±fÄ±rlamak iÃ§in kullanÄ±labilir.

        // try {
        //     let lastName = 'Biber'
        //     let fullName = fistName + ' ' + lastName
        // } catch (error) {
        //     console.log(error)
        // }; // -> ReferenceError: fistName is not defined

        // try {
        //     let lastName = 'Biber'
        //     let fullName = fistName + ' ' + lastName
        // } catch (error) {
        //     console.error(error) // console.log() veya console.error() kullanabiliriz.
        // } finally {
        //     console.log('In any case I will be executed')
        // }

        /* Catch bloÄŸu bir parametre alÄ±r. Catch bloÄŸuna parametre olarak e veya error iletmek yaygÄ±ndÄ±r. Bu parametre bir nesnedir ve isim ve mesaj anahtarlarÄ±na sahiptir. AdÄ± ve mesajÄ± kullanalÄ±m. */

        // try {
        //     let lastName = 'Biber'
        //     let fullName = fistName + ' ' + lastName
        // } catch (error) {
        //     console.log('Name of the error: ', error.name)
        //     console.log('Error message: ', error.message)
        // } finally {
        //     console.log('In any case I will be executed')
        // }

        /* OUTPUT: 

            Name of the error: ReferenceError
            Error message: fistName is not defined
        */

        //* throw: throw ifadesi Ã¶zel bir hata oluÅŸturmamÄ±za izin verir. Bir dize, sayÄ±, boolean veya bir nesne aracÄ±lÄ±ÄŸÄ±yla yapabiliriz. Bir istisna atmak iÃ§in throw ifadesini kullanabiliriz. Bir throw exception yazdÄ±ÄŸÄ±mÄ±zda, expression specifies deÄŸerini belirtir. AÅŸaÄŸÄ±dakilerin her biri "throw exception" atar:

            // throw "Error";
            // throw 53;
            // throw true;
            // throw new Error('Required');

        // const throwErrorExampleFun = () => {
        //     let message;
        //     let x = prompt('Enter a number: ');
        //     try {
        //         if (x == '') throw 'Empty';
        //         if (isNaN(x)) throw 'Not a Number'
        //         x = Number(x);
        //         if (x < 5) throw 'too low';
        //         if (x > 10) throw 'too high';
        //     } catch (error) {
        //         console.log(error)
        //     }
        // }; throwErrorExampleFun();

    // Error Types

        //* ReferenceError: GeÃ§ersiz bir referans oluÅŸturur. TanÄ±mlanmamÄ±ÅŸ bir deÄŸiÅŸken kullanÄ±rsak bir ReferenceError atÄ±lÄ±r.

            // let firstName = 'Selim'
            // let fullName = firstName + ' ' + lastName
            
            // console.log(fullName); // -> Uncaught ReferenceError: lastName is not defined

        //* SyntaxError: Bir syntax(sÃ¶zdizim) hatasÄ± oluÅŸturur.

            // let square = 2 x 2
            // console.log(square)
            
            // console.log("Hello, world"); // -> Uncaught SyntaxError: Unexpected identifier 'x'

        //* TypeError: Bir type hatasÄ± oluÅŸturur.

            // let num = 10
            // console.log(num.toLowerCase()); // -> Uncaught TypeError: num.toLowerCase is not a function

//! ðŸŽ‰ CONGRATULATIONS ! ðŸŽ‰
